{"version":3,"file":"ajax-reload.878c9470.js","mappings":"YAGA,MACI,MAAMA,mBAAqB,CAAC,EACtBC,iBAAmB,CAAC,EAE1B,SAASC,kBAAkBC,GACH,IAAhBA,EAAKC,QACLC,QAAQC,MAAM,qCAGlB,MAAMC,EAAM,CAAC,EACPC,EAAS,GACTC,EAAY,IAAIC,SAASC,iBAAiB,gCAEhDR,EAAKS,QAASC,IACV,IAAIC,EAAYD,EAEK,iBAAVA,IACPC,EAAY,CAAEC,KAAMF,IAGxB,IAAIG,GAAQ,EAGZP,EAAUG,QAASK,KAC2D,IAAtEA,EAAGC,QAAQC,mBAAmBC,MAAM,KAAKC,QAAQP,EAAUC,QAC3DC,GAAQ,EACRT,EAAIU,EAAGC,QAAQI,aAAeL,KAIlCD,GACAR,EAAOe,KAAKT,KAIhBU,OAAOC,KAAKlB,GAAKH,OAAS,GAAKI,EAAOJ,OAAS,GAC/CI,EAAOI,QAASC,GAAUa,YAAYnB,EAAKM,GAEnD,CAEA,SAASa,YAAYnB,IAAKM,OAElBZ,iBAAiBY,MAAME,OACvBd,iBAAiBY,MAAME,MAAMY,QAGjCH,OAAOC,KAAKlB,KAAKK,QAASgB,IAEtB5B,mBAAmB4B,GAAOf,MAAME,KAGhCR,IAAIqB,GAAKC,UAAUC,IAAI,0BAG3B,MAAMC,IAAM,IAAIC,eAEhBD,IAAIE,KAAK,MAAOC,OAAOC,SAASC,MAChCL,IAAIM,iBAAiB,gBAAiB,YACtCN,IAAIM,iBAAiB,SAAU,YAC/BN,IAAIM,iBAAiB,mBAAoB,kBACzCN,IAAIM,iBAAiB,oBAAqBxB,MAAME,MAGhDS,OAAOc,QAAQzB,MAAM0B,SAAW,CAAC,GAAG3B,QAAS4B,IACzCT,IAAIM,oBAAoBG,KAG5BT,IAAIU,OAAS,KACT,GAAmB,MAAfV,IAAIW,OAAgB,CACpB,MAAMC,OAAS,CAAC,EACVL,QAAUM,KAAKC,MAAMd,IAAIe,cAE/BtB,OAAOC,KAAKa,SAAS1B,QAASmC,KAEtBxC,IAAIwC,KAAO/C,mBAAmB+C,MAAQlC,MAAME,OAC5CR,IAAIwC,IAAIC,UAAYV,QAAQS,IAC5B/C,mBAAmB+C,IAAM,KAGzBJ,OAAOI,IAAMrC,SAASuC,cAAc,wBAAwBF,QAG5D,IAAIJ,OAAOI,IAAIG,qBAAqB,WAAWtC,QAASuC,QAAWC,KAAKD,OAAOE,eAKvF3C,SAAS4C,cACL,IAAIC,YAAY,0BAA2B,CACvCC,SAAS,EACTC,YAAY,EACZC,OAAQ,CACJpB,gBACAzB,MAAOA,MAAME,KACbD,UAAWD,MACX8C,YAAapD,IACbqD,YAAajB,UAI7B,MACItC,QAAQC,MAAM,0BAA0BO,MAAME,oBAC9CV,QAAQC,MAAMyB,KAGlB9B,iBAAiBY,MAAME,MAAQ,MAGnCgB,IAAI8B,OACJ5D,iBAAiBY,MAAME,MAAQgB,GACnC,CAGAG,OAAO4B,gBAAkB,CAAE5D,8BAC9B,EAlHD,E","sources":["webpack:///./assets/ajax-reload.js"],"sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable no-eval */\n\n(() => {\n    const elementsInProgress = {};\n    const eventsInProgress = {};\n\n    function dispatchEvents(...args) {\n        if (args.length === 0) {\n            console.error('Please provide at least one event');\n        }\n\n        const els = {};\n        const events = [];\n        const listeners = [...document.querySelectorAll('[data-haste-ajax-listeners]')];\n\n        args.forEach((event) => {\n            let eventData = event;\n\n            if (typeof event === 'string') {\n                eventData = { name: event };\n            }\n\n            let found = false;\n\n            // Find the elements that listen to particular event\n            listeners.forEach((el) => {\n                if (el.dataset.hasteAjaxListeners.split(' ').indexOf(eventData.name) !== -1) {\n                    found = true;\n                    els[el.dataset.hasteAjaxId] = el;\n                }\n            });\n\n            if (found) {\n                events.push(eventData);\n            }\n        });\n\n        if (Object.keys(els).length > 0 && events.length > 0) {\n            events.forEach((event) => sendRequest(els, event));\n        }\n    }\n\n    function sendRequest(els, event) {\n        // Abort the current request, if any\n        if (eventsInProgress[event.name]) {\n            eventsInProgress[event.name].abort();\n        }\n\n        Object.keys(els).forEach((key) => {\n            // Mark the events to be updated by this event\n            elementsInProgress[key] = event.name;\n\n            // Add the CSS class\n            els[key].classList.add('haste-ajax-reloading');\n        });\n\n        const xhr = new XMLHttpRequest();\n\n        xhr.open('GET', window.location.href);\n        xhr.setRequestHeader('Cache-Control', 'no-cache');\n        xhr.setRequestHeader('Pragma', 'no-cache');\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        xhr.setRequestHeader('Haste-Ajax-Reload', event.name);\n\n        // Set the custom headers\n        Object.entries(event.headers || {}).forEach((v) => {\n            xhr.setRequestHeader(...v);\n        });\n\n        xhr.onload = () => {\n            if (xhr.status === 200) {\n                const newEls = {};\n                const entries = JSON.parse(xhr.responseText);\n\n                Object.keys(entries).forEach((id) => {\n                    // Replace the entry only if it's marked to be updated by this event\n                    if (els[id] && elementsInProgress[id] === event.name) {\n                        els[id].outerHTML = entries[id];\n                        elementsInProgress[id] = null;\n\n                        // Add new element\n                        newEls[id] = document.querySelector(`[data-haste-ajax-id=\"${id}\"]`);\n\n                        // Execute the <script> tags inside the new element\n                        [...newEls[id].getElementsByTagName('script')].forEach((script) => eval(script.innerHTML));\n                    }\n                });\n\n                // Dispatch a global custom event\n                document.dispatchEvent(\n                    new CustomEvent('HasteAjaxReloadComplete', {\n                        bubbles: false,\n                        cancelable: false,\n                        detail: {\n                            entries,\n                            event: event.name,\n                            eventData: event,\n                            oldElements: els,\n                            newElements: newEls,\n                        },\n                    }),\n                );\n            } else {\n                console.error(`The request for event \"${event.name}\" has failed`);\n                console.error(xhr);\n            }\n\n            eventsInProgress[event.name] = null;\n        };\n\n        xhr.send();\n        eventsInProgress[event.name] = xhr;\n    }\n\n    // Public API\n    window.HasteAjaxReload = { dispatchEvents };\n})();\n"],"names":["elementsInProgress","eventsInProgress","dispatchEvents","args","length","console","error","els","events","listeners","document","querySelectorAll","forEach","event","eventData","name","found","el","dataset","hasteAjaxListeners","split","indexOf","hasteAjaxId","push","Object","keys","sendRequest","abort","key","classList","add","xhr","XMLHttpRequest","open","window","location","href","setRequestHeader","entries","headers","v","onload","status","newEls","JSON","parse","responseText","id","outerHTML","querySelector","getElementsByTagName","script","eval","innerHTML","dispatchEvent","CustomEvent","bubbles","cancelable","detail","oldElements","newElements","send","HasteAjaxReload"],"sourceRoot":""}